//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CuentasWeb.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DbContext1 : DbContext
    {
        public DbContext1()
            : base("name=DbContext1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Cuentas> Cuentas { get; set; }
        public virtual DbSet<Movimientos> Movimientos { get; set; }
        public virtual DbSet<Parametros> Parametros { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual ObjectResult<calculoSaldo_Result> calculoSaldo(Nullable<int> idCta, Nullable<decimal> valorRetiro, string cuentaDestino, string tipoTransaccion)
        {
            var idCtaParameter = idCta.HasValue ?
                new ObjectParameter("IdCta", idCta) :
                new ObjectParameter("IdCta", typeof(int));
    
            var valorRetiroParameter = valorRetiro.HasValue ?
                new ObjectParameter("valorRetiro", valorRetiro) :
                new ObjectParameter("valorRetiro", typeof(decimal));
    
            var cuentaDestinoParameter = cuentaDestino != null ?
                new ObjectParameter("cuentaDestino", cuentaDestino) :
                new ObjectParameter("cuentaDestino", typeof(string));
    
            var tipoTransaccionParameter = tipoTransaccion != null ?
                new ObjectParameter("tipoTransaccion", tipoTransaccion) :
                new ObjectParameter("tipoTransaccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<calculoSaldo_Result>("calculoSaldo", idCtaParameter, valorRetiroParameter, cuentaDestinoParameter, tipoTransaccionParameter);
        }
    }
}
